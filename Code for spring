import jakarta.persistence.*;

@Entity
public class Product {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private Double price;

    private String imagePath; // only store path or filename

    // getters and setters
}


service layer


import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

@Service
public class ProductService {

    private final ProductRepository repo;
    private final String uploadDir = "uploads/"; // create this folder in project root

    public ProductService(ProductRepository repo) {
        this.repo = repo;
        new File(uploadDir).mkdirs(); // ensure folder exists
    }

    public Product saveProduct(String name, Double price, MultipartFile file) throws IOException {
        String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path filePath = Paths.get(uploadDir, fileName);
        Files.write(filePath, file.getBytes());

        Product product = new Product();
        product.setName(name);
        product.setPrice(price);
        product.setImagePath(fileName); // save only filename
        return repo.save(product);
    }

    public List<Product> getAllProducts() {
        return repo.findAll();
    }

    public byte[] getImage(String fileName) throws IOException {
        Path path = Paths.get(uploadDir, fileName);
        return Files.readAllBytes(path);
    }
}


controller


import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/products")
@CrossOrigin(origins = "http://localhost:4200") // allow Angular
public class ProductController {

    private final ProductService service;

    public ProductController(ProductService service) {
        this.service = service;
    }

    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Product> addProduct(
            @RequestParam("name") String name,
            @RequestParam("price") Double price,
            @RequestParam("image") MultipartFile file) throws IOException {
        return ResponseEntity.ok(service.saveProduct(name, price, file));
    }

    @GetMapping
    public List<Product> getAllProducts() {
        return service.getAllProducts();
    }

    @GetMapping("/images/{fileName}")
    public ResponseEntity<byte[]> getImage(@PathVariable String fileName) throws IOException {
        byte[] image = service.getImage(fileName);
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=" + fileName)
                .contentType(MediaType.IMAGE_JPEG) // or detect dynamically
                .body(image);
    }
}



frontend


html

<div>
  <h2>Product List</h2>
  <div *ngFor="let product of products">
    <h3>{{ product.name }} - ${{ product.price }}</h3>
    <img [src]="getImageUrl(product.imagePath)" alt="{{ product.name }}" width="150" />
  </div>
</div>


ts

getImageUrl(fileName: string) {
  return this.productService.getProductImage(fileName);
}


service

getProductImage(fileName: string): string {
  return `${this.baseUrl}/images/${fileName}`;
}
